import React, { useEffect } from "react";
import useAPI from "../../hooks/useAPI";
import { useParams } from "react-router-dom";
import { useState } from "react";
import Loader from "../loading/Loading";
import { paginationPageSize, userProfession } from "../../utils/constants";
import Pagination from "../pagination/Pagination";
import { GetDate } from "../../utils/timeUtil";

const ProjectActivity = () => {
  // const [projectItems, setProjectItems] = useState([]);
  const [preConstCurrentPage, setPreConstCurrentPage] = useState(1);
  const [constCurrentPage, setConstCurrentPage] = useState(1);
  const [postConstCurrentPage, setPostConstCurrentPage] = useState(1);
  const [memberDetail, setMemberDetail] = useState(null);

  const [preConsPhaseData, setPreConsPhaseData] = useState(null);
  const [ConsPhaseData, setConsPhaseData] = useState(null);
  const [postConsPhaseData, setPostConsPhaseData] = useState(null);

  const {
    loading: memberLoading,
    error: memberError,
    setErrToNull: memberSetErrToNull,
    get: memberGet,
  } = useAPI();
  const {
    loading: preConsLoading,
    error: preConsError,
    setErrToNull: preConsSetErrToNull,
    get: preConsGet,
  } = useAPI();
  const {
    loading: consLoading,
    error: consError,
    setErrToNull: consSetErrToNull,
    get: consGet,
  } = useAPI();
  const {
    loading: postConsLoading,
    error: postConsError,
    setErrToNull: postConsSetErrToNull,
    get: postConsGet,
  } = useAPI();

  const { projectId } = useParams();

  useEffect(() => {
    const fetchMemberDetail = async () => {
      try {
        const memberResponse = await memberGet(
          `/Project/user/GetProjMemberDetails/${projectId}`
        );
        setMemberDetail(memberResponse?.data);
        console.log(memberResponse);
        memberSetErrToNull();
      } catch (err) {
        setMemberDetail(null);
      }
    };

    fetchMemberDetail();
  }, [projectId]);

  useEffect(() => {
    let preConsUrl = "";
    // consUrl = "",
    // postConsUrl = "";

    if (memberDetail?.role === 1 || memberDetail?.role === 3) {
      preConsUrl = `https://localhost:7129/api/Activity/PM/GetProjectPhaseActivities?projectId=${projectId}&projectPhase=1&pageNumber=${preConstCurrentPage}&pageSize=${paginationPageSize}`;
    } else if (memberDetail?.role === 2) {
      preConsUrl = `https://localhost:7129/api/Activity/OtherPro/GetProjectPhaseActivities?projectId=${projectId}&projectPhase=1&pageNumber=${preConstCurrentPage}&pageSize=${paginationPageSize}`;
    }

    const fetchPreConsData = async () => {
      try {
        if (preConsUrl) {
          const response = await preConsGet(preConsUrl);
          setPreConsPhaseData(response);
          preConsSetErrToNull();

          console.log(response)
        }
      } catch (err) {
        setPreConsPhaseData(null);
      }
    };

    fetchPreConsData();
  }, [projectId, preConstCurrentPage, memberDetail]);

  useEffect(() => {
    let consUrl = "";

    if (memberDetail?.role === 1 || memberDetail?.role === 3) {
      consUrl = `https://localhost:7129/api/Activity/PM/GetProjectPhaseActivities?projectId=${projectId}&projectPhase=2&pageNumber=${constCurrentPage}&pageSize=${paginationPageSize}`;
    } else if (memberDetail?.role === 2) {
      consUrl = `https://localhost:7129/api/Activity/OtherPro/GetProjectPhaseActivities?projectId=${projectId}&projectPhase=2&pageNumber=${constCurrentPage}&pageSize=${paginationPageSize}`;
    }

    const fetchConsData = async () => {
      try {
        if (consUrl) {
          const response = await consGet(consUrl);
          setConsPhaseData(response);
          consSetErrToNull();
          console.log(response);
        }
      } catch (err) {
        setConsPhaseData(null);
      }
    };

    fetchConsData();
  }, [projectId, constCurrentPage, memberDetail]);

  useEffect(() => {
    let postConsUrl = "";

    if (memberDetail?.role === 1 || memberDetail?.role === 3) {
      postConsUrl = `https://localhost:7129/api/Activity/PM/GetProjectPhaseActivities?projectId=${projectId}&projectPhase=3&pageNumber=${postConstCurrentPage}&pageSize=${paginationPageSize}`;
    } else if (memberDetail?.role === 2) {
      postConsUrl = `https://localhost:7129/api/Activity/OtherPro/GetProjectPhaseActivities?projectId=${projectId}&projectPhase=3&pageNumber=${postConstCurrentPage}&pageSize=${paginationPageSize}`;
    }

    const fetchPostConsData = async () => {
      try {
        if (postConsUrl) {
          const response = await postConsGet(postConsUrl);
          setPostConsPhaseData(response);
          postConsSetErrToNull();
          console.log(response);
        }
      } catch (err) {
        setPostConsPhaseData(null);
      }
    };

    fetchPostConsData();
  }, [projectId, postConstCurrentPage, memberDetail]);

  return (
    <>
      <div>ProjectActivity</div>
      {memberLoading && <Loader />}
      {memberDetail && !memberLoading && (
        <>
          <div>
            <p>{memberDetail?.projectName || ""}</p>
            <p>{`${memberDetail?.firstName || ""}  ${
              memberDetail?.lastName || ""
            }`}</p>
            <p>{userProfession[memberDetail?.profession] || ""}</p>
          </div>
          <div className="activity-tables">
            {memberDetail.Role === 2 && (
              //             const [preConsPhaseData, setPreConsPhaseData] = useState(null);
              // const [ConsPhaseData, setConsPhaseData] = useState(null);
              // const [postConsPhaseData, setPostConsPhaseData] = useState(null);
              <div className="Other-Pro-tables">

                <div className="Otherpro-PreConstruction-table">
                  <p> Pre Construction</p>
                  <>
                    <table className="table-green">
                      <thead>
                        <tr>
                          {/* <th>S/N</th> */}
                          <th>Name</th>
                          <th>Start Date</th>
                          <th>End Date</th>
                          <th>Actual Start Date</th>
                          <th>Actual End Date</th>
                          <th>Status</th>
                          {/* Add more table headers if needed */}
                        </tr>
                      </thead>
                      <tbody>
                        {/* {!error && data?.data.map((item) => ( */}
                        {preConsPhaseData?.data?.map((item) => (
                          <tr
                            key={item.id}
                            // onClick={() => NavigateToActivity(item.id)}
                          >
                            <td>{item.name}</td>
                            <td>{GetDate(item.startDate)}</td>
                            <td>{GetDate(item.endDate)}</td>
                            <td>
                              {item.actualStartDate
                                ? GetDate(item.actualStartDate)
                                : "No date"}
                            </td>
                            <td>
                              {item.actualEndDate
                                ? GetDate(item.actualEndDate)
                                : "No date"}
                            </td>
                            <td>
                              {item.status === 1
                                ? "Pending"
                                : item.status === 2
                                ? "Approved"
                                : "Rejected"}
                            </td>
                            {/* <td></td> */}
                            {/* Add more table cells if needed */}
                          </tr>
                        ))}
                      </tbody>
                    </table>
                    <Pagination
                      className="pagination-bar"
                      currentPage={preConstCurrentPage}
                      totalCount={preConsPhaseData?.pagination?.totalCount || 3}
                      // totalCount={10}
                      pageSize={paginationPageSize}
                      onPageChange={(page) => setPreConstCurrentPage(page)}
                    />
                  </>
                </div>
                <div className="Otherpro-Construction-table"></div>
                <div className="Otherpro-PostConstruction-table"></div>
              </div>
            )}

            {memberDetail.Role === 1 ||
              (memberDetail.Role === 1 && (
                <div className="Pm-tables">
                  <div className="Pm-PreConstruction-table"> </div>
                  <div className="Pm-Construction-table"></div>
                  <div className="Pm-PostConstruction-table"></div>
                </div>
              ))}

            {/* {memberDetail.Role === 3 && (
              <div className="Client-tables">
                <div className="Client-PreConstruction-table"> </div>
                <div className="Client-Construction-table"></div>
                <div className="Client-PostConstruction-table"></div>
              </div>
            )} */}
          </div>

          {/* <p>{memberLoading}</p> */}
        </>
      )}
    </>
  );
};

export default ProjectActivity;
